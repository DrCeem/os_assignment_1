Εργασία 1 Λειτουργικά Συστήματα 
Ονοματεπώνυμο: Ορφέας Ηλιάδης-Σιβρής
Αριθμός Μητρώου: 1115202000057


Compille with : make all
Delete Object files: make clean.

Run/Test: With split terminal
Terminal 1 : ./proccess_A shm_path_name outputA.txt  Ή ./proccess_A shm_path_name
Terminal 2 : ./proccess_Β shm_path_name outputΒ.txt  Ή ./proccess_Β shm_path_name

Περιγραφή υλοποίησης:
-Η Εργασία αποτελείται από ένα αρχείο κεφαλίδας (header) proccess.h το το οποίο είναι βασισμένο στο αρχείο pshm_ucase.h του
κώδικα του εργαστηρίου που αφορά τους POSIX σημαφόρους και περιέχει ένα struct που αφορά την "δομή" της διαμοιραζόμενης μνήμης
(shared memory segment).
-Αποτελείται επιπλέον από 2 αρχεία πηγαίου κωδικα (c source files) proccess_A.c, proccess_B.c . Τα δύο αυτά αρχεία υλοποιούν 
το καθένα  μια απο 2 διεργασίες οι οποίες ανταλλασουν δεδομένα μέσω της διαμοιραζόμενης μνήμης. Συγκεκριμένα κάθε διεργασία έχει μια 
συνάρτηση input_and_save_thread και read_memory_and_output_thread οι οποίες υλοποιούν για κάθε διεργασία 2 threads. Το thread 
που αφορά την input_and_save_thread αναλαμβάνει την ανάγνωση σημβολοσειρών από την τυπική είσοδο και αποθήκευση στην διαμοιραζόμενη μνήμη,ενώ
το thread που αφορα την read_memory_and_output_thread αναλαμβάνει την ανάγνωση συμβολοσειρών απο την διαμοιραζόμενη μνήμη και την εκτύπωση στην
τυπική έξοδο. To input_and_save_thread αναλαμβάνει επίσης να χωρίζονται τα πακέτα σε πακέτα των 15 και να στέλνονται ξεχωριστά ,ενώ το
read_memory_and_output_thread αναλαμβάνει επίσης να ανακτόνται όλα τα πακέτα ενός μηνύματος πριν την εκτύπωση στην τυπική έξοδο.

Περιγραφή Κώδικα:

Ορίζονται σε κάθε αρχείο global μεταβλητές (για να μπορούν ολα τα threads της διεργασίας να έχουν πρόσβαση) οι οποίες χρησιμοποιούνται 
για τα στατιστικά που πρέπει να τυπώνοντα στο τέλος κάθε διεργασίας. Κάθε διεργασία μπορεί να πάρει από την γραμμη εντολών 1 ή 2 ορίσματα.
Στην περίπτωση που θα δοθεί ένα όρισμα το όρισμα αφορά το όνομα του path του shared memory και πρέπει να είναι η ίδια συμβολοσειρά και για τις δύο
διεργασίες. Σε περίπτωση που δοθούν 2 ορίσματα, το δεύτερο είναι το όνομα του αρχείου στο οποίο θα γίνει ανακατεύθυνση στην τυπική έξοδο
και πρέπει να είναι της μορφής: file_name.txt . Μετά την ανακατεύθυνση (αν πρόκειται για αυτήν την περίπτωση) η διεργασία Α δημιουργεί μια δομή και 
δεσμεύει χώρο για να την διαμοιραζόμενη μνήμη. Η διεργασία Β αντίθετα απλα ανοίγει την διαμοιραζόμενη μνήμη που δημιούργησε η Α για να έχει πρόσβαση
σε αυτήν. Στην συνέχεια οι δυο διεργασίες αναθέτουν σε εναν δείκτη στην δομη που αφορά το shared memory, την διεύθυνση της δομής διαμοιραζόμενης
μνήμης, αρχικοποιούν σε 0 όλες τις μεταβλήτες που αφορούν τα στατιστικά της κάθε μίας και η διεργασία Α αναλαμβάνει και την αρχικοπολιηση στο 0
των 5 σημαφόρων της διαμοιραζόμενης μνήμης. Στην συνέχεια οι 2 διεργασίες δημιουργούν από 2 threads η κάθε μια: Το ένα thread "εκτελεί" την
συνάρτηση input_and_save_thread και το άλλο την  read_memory_and_output_thread.

input_and_save_thread: H συνάρτηση αυτη δέχεται σαν παράμετρο έναν δείκτη στην διαμοιραζόμενη μνήμη. Η συνάρτηση εκτελείται επαναληπτικά
μεχρι να δοθεί σαν input απο τον χρήστη η συμβολοσειρά τερματισμού :"#BYE#" η μέχρι να κληθεί pthread_cancel απο την διεργασία.Η συνάρτηση
διαβάζει μια συμβολοσειρά που καταχωρεί στην τυπικη είσοδο ο χρήστης. Αρχικά υπολογίζει πόσες 15άδες χαρακτήρων απαιτούνται για να μεταφερθεί 
στην διαμοιραζόμενη μνήμη ολόκληρο το μήνυμα του χρήστη. Στην συνέχεια επαναληπτικά αντιγράφει κάθε πακέτο (15άδα) στην μνήμη και στην συνέχεια
κάνει post έναν σημαφόρο (για την Α: semaphore2 , για την Β: semaphore4) για να ενημερώσει την άλλη διεργασία ότι μπορεί να διαβάσει την 
συγκεκριμένη 15άδα απτην μνήμη. Ταυτόχρονα για κάθε πακέτο μέτα το πρώτο πριν το αντιγράψει στην μνήμη κανει wait απο την άλλη διεργασία 
να ολοκληρώσει την ανάγνωση (για την Α: semaphore1, για την Β: semaphore3). Σε κάθε αποστολή πάκετου φροντίζει να ενημερώνει 
τα περιεχόμενα της δομής διαμοιραζόμενης μνήμης ανάλογα οπως: Συνολικός αριθμός πακέτων προς μεταφορά, id πάκετου προς μεταφορά, πληροφορία 
σχετικά με το ποία διεργασία γράφει στην μνήμη , ενώ αν πρόκειται για το πρώτο πακέτο ενός μηνύματος αποθηκεύει την χρονική στιγμή την οποία αυτο
αντιγράφτηκε στην μνήμη. Μόλις ολοκληρώσει την μεραφορά κάποιου μηνύματος αυξάνει τις μεταβλητές που αφορών το Συνολικό
πλήθος μηνυμάτων και συνολικό πλήθος πακέτων αναλόγως. Τέλος αν πράγματι δοθεί σαν input το #BYE# φροντίζει να κάνει post τον συμαφόρο
exit_semaphore για να μπορέσει η διεργασία να ολοκληρώσει την εκτέλεση της .

read_memory_and_output_thread:H συνάρτηση αυτη δέχεται σαν παράμετρο έναν δείκτη στην διαμοιραζόμενη μνήμη. Η συνάρτηση εκτελείται επαναληπτικά
μεχρι να διαβάσει απτην μνήμη την συμβολοσειρά τερματισμού :"#BYE#"η μέχρι να κληθεί pthread_cancel απο την διεργασία.Η συνάρτηση αυτή 
αρχικοποιεί έναν πίνακα για να διαβάσει τα δεδομένα απο την μνήμη και έπειτα κάνει wait (για την Α: semaphore4 , για την Β: semaphore2) μέχρι
η άλλη διεργασία να ολοκληρώσει την εγγραφή κάποιου πακέτου. Μόλις γίνει αυτο αντιγράφει το πακέτο στην μεταβλητη και έπειτα κανει post 
(για την Α: semaphore3, για την Β: semaphore1) για να ενημερώσει την άλλη διεργασία ότι μπορεί να γράψει το επόμενο πακέτο στην μνήμη.
Αν το πακέτο που διαβάζει είναι το πρώτο τότε υπολογίζει τον χρόνο που πέρασε μέχρι να διαβαστεί το πακέτο (αφαιρόντας τον τωρινό χρονο με τον χρόνο 
την στιγμή που γράφτηκε στην μνήμη) και τον προσθέτει στην μεταβλητή total_time_elapsed. Αν το πακέτο είναι το τελευταίο τότε 
τυπώνει στην τυπική έξοδο (ή στο αρχείο ανακατεύθυνσης ) το μήνυμα και αυξάνει το total_messages_received κατα 1. 
Θέτει το length της διαμοιραζόμενης μνήμης ως 0 για να δείξει ότι το περιεχόμενο της μνήμης έχει ήδη διαβαστεί. Τέλος αν διαβάσει
από την μνήμη #BYE# κάνει post τον exit_semaphore και ολοκληρώνει.


Μολις κληθεί μία φορά post για τον exit_semaphore μια από τις 2 διεργασίες θα εκτυπώσει τα στατιστικά της στην τυπική εξοδο 
(ή στο αρχείο ανακατεύθυνσης) και σύντομα μετά θα ξανακληθεί post και θα το κάνει και η άλλη. Η διεργασία Α πάντα θα αποδεσμεύει
την διαμοιραζόμενη μνήμη κάνοντας unlink (περιμένει μεχρι να ολοκληρώσει την χρηση της μνήμης η Β αν την χρησιμοποιεί) και 
τελικά και οι 2 διεργασίες θα επιστρέψουν 0 εκδηλώνοντας επιτυχή εκτέλεση.

Συμβαση: Εγινε η σύμβαση ότι όταν η input_and_save_thread διαβάζει την συμβολοσειρά τερματισμού #BYE# θα φροντίζει να 
την αντιγράφει στην μνήμη ώστε να ολοκληρώσει την εκτέλεση και η άλλη διεργασία. Επιπλέον η συμβολοσειρά αυτή προσμετρείται στον υπολογισμό
των τελικών στατιστικών κάθε διεργασίας.

Mια ενδεικτική εκτέλεση είναι η παρακάτω:

Input: Terminal 1: ./proccess_A shm-fl out_A.txt
       Terminal 2: ./proccess_b shm-fl out_B.txt
       Terminal 1: Hello
       Terminal 2: Good afternoon, How are you?
       Terminal 1: Fine
       Terminal 2: 1234567890!@#$%^&*()
       Terminal 2: This is going to be the last message sent from here ok?
       Terminal 1: #BYE#  

Output:

out_A.txt :

Good afternoon, How are you?
1234567890!@#$%^&*()
This is going to be the last message sent from here ok?
Shared memory object "shm-fl" has been created at address"0x7f09dd972000"
Number of total messages sent: 3, Number of total messages received 3
Total Number of packages sent: 3
Avarage number of packages sent per message: 1.000000 
Avarage time it took first package to arrive (in microseconds): 68.000000 

out_B.txt :
Hello
Fine
#BYE#
Shared memory object "shm-fl" has been created at address"0x7f9ed4531000"
Number of total messages sent: 3, Number of total messages received 3
Total Number of packages sent: 8
Avarage number of packages sent per message: 2.666667 
Avarage time it took first package to arrive (in microseconds): 40.333332 
